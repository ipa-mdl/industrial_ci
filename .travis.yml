# This .travis.yml works to check "this" repository, namely `industrial_ci`.
# A template for users can be found here: https://github.com/ros-industrial/industrial_ci/blob/master/doc/.travis.yml

# Greatly inspired by JSK travis: https://github.com/jsk-ros-pkg/jsk_travis

services:
  - docker
# Force travis to use its minimal image with default Python settings
language: minimal

git:
  quiet: true

cache:
  directories:
    - $HOME/.ccache

env:
  matrix:
    # normal run for all supported distros
    - ROS_DISTRO=indigo  ROS_REPO=ros
    - ROS_DISTRO=jade    ROS_REPO=ros
    - ROS_DISTRO=kinetic ROS_REPO=ros
    - ROS_DISTRO=lunar   ROS_REPO=ros
    - ROS_DISTRO=melodic ROS_REPO=ros
    - ROS_DISTRO=ardent  ROS_REPO=ros AFTER_SETUP_TARGET_WORKSPACE='sed -i -e "/!= 2/d" -e "s/ condition=\"\$ROS_VERSION == 2\"//g" $target_ws/src/industrial_ci/industrial_ci/package.xml'
    - ROS_DISTRO=bouncy  ROS_REPO=ros
    - ROS_DISTRO=crystal ROS_REPO=ros
    - ROS_DISTRO=dashing ROS_REPO=ros

    # testing run for non-EOL distros
    - ROS_DISTRO=kinetic ROS_REPO=testing
    - ROS_DISTRO=melodic ROS_REPO=testing
    - ROS_DISTRO=crystal ROS_REPO=testing
    - ROS_DISTRO=dashing ROS_REPO=testing

    # prerelease run for non-EOL distros
    - ROS_DISTRO=kinetic PRERELEASE=true
    - ROS_DISTRO=melodic PRERELEASE=true
    - ROS_DISTRO=crystal PRERELEASE=true
    - ROS_DISTRO=dashing PRERELEASE=true

    # test CMAKE_ARGS
    - ROS_DISTRO=melodic ROS_REPO=ros TARGET_WORKSPACE='industrial_ci/tests/industrial_ci_testpkg' CMAKE_ARGS="-DFAIL_CMAKE=true" EXPECT_EXIT_CODE=1

    # test CATKIN_LINT
    - ROS_DISTRO=melodic ROS_REPO=ros TARGET_WORKSPACE='industrial_ci/tests/industrial_ci_testpkg' CATKIN_LINT=true
    - ROS_DISTRO=melodic ROS_REPO=ros TARGET_WORKSPACE='industrial_ci/tests/industrial_ci_testpkg' CATKIN_LINT=pedantic EXPECT_EXIT_CODE=1

    # test ROSDEP_SKIP_KEYS
    - ROS_DISTRO=melodic ROS_REPO=ros TARGET_WORKSPACE='industrial_ci/tests/industrial_ci_testpkg' ROSDEP_SKIP_KEYS="rospy_tutorials rostest" EXPECT_EXIT_CODE=1

    # test failing package
    - ROS_DISTRO=melodic ROS_REPO=ros TARGET_WORKSPACE='industrial_ci/tests/testpkg_broken_install' EXPECT_EXIT_CODE=1

    # test CATKIN_LINT
    - DOCKER_IMAGE='arm32v7/ros:melodic-ros-core' INJECT_QEMU=arm BEFORE_INIT='[[ $(uname -p) == armv7l ]]'

    # test failing prerelease
    - ROS_DISTRO=melodic PRERELEASE=true TARGET_WORKSPACE='industrial_ci/tests/failing_test' PRERELEASE_REPONAME="failing_test" EXPECT_EXIT_CODE=1

    # test CCACHE_DIR
    - ROS_DISTRO=melodic ROS_REPO=ros UPSTREAM_WORKSPACE=debian CCACHE_DIR= AFTER_SCRIPT='ccache 2> /dev/null && exit 1; [ "$?" = "127" ]'
    - ROS_DISTRO=melodic ROS_REPO=ros UPSTREAM_WORKSPACE=file AFTER_SCRIPT='num=($(ccache -s | grep "files in cache")) && (( num[-1] > 0 ))'

    # test ADDITIONAL_DEBS
    - ROS_DISTRO=melodic ROS_REPO=ros ADDITIONAL_DEBS="ros-melodic-actionlib"
    - ROS_DISTRO=melodic ROS_REPO=ros ADDITIONAL_DEBS="ros-hydro-actionlib" EXPECT_EXIT_CODE=100 # This should fail (trying from a wrong distro).

    # test DOCKER_COMMIT
    - DOCKER_BASE_IMAGE="ros:kinetic-ros-base" ROS_REPO=ros NOT_TEST_BUILD='true' DOCKER_COMMIT="img_temp" POST_PROCESS='eval docker image inspect $DOCKER_COMMIT --format="$DOCKER_COMMIT: \"{{.Size}}\" bytes"'

    # test Debian
    - ROS_DISTRO=melodic ROS_REPO=ros AFTER_SCRIPT='grep -q ID=ubuntu /etc/os-release && grep -q VERSION_CODENAME=bionic /etc/os-release'
    - ROS_DISTRO=melodic BEFORE_INIT='grep -q ID=debian /etc/os-release && grep -q VERSION_ID=\"9\" /etc/os-release' EXPECT_EXIT_CODE=1
    - ROS_DISTRO=melodic OS_NAME=debian OS_CODE_NAME=stretch AFTER_SCRIPT='grep -q ID=debian /etc/os-release && grep -q VERSION_ID=\"9\" /etc/os-release'
    - ROS_DISTRO=melodic OS_NAME=debian EXPECT_EXIT_CODE=1
    - ROS_DISTRO=melodic OS_NAME=debian OS_CODE_NAME=bionic EXPECT_EXIT_CODE=1

    # test rosenv
    - ROS_DISTRO=melodic ROS_REPO=ros BUILDER=colcon AFTER_SCRIPT='rosenv && [ "$CMAKE_PREFIX_PATH" = "/root/target_ws/install/industrial_ci:/opt/ros/melodic" ]'

    # test ABICHECK_URL
    - ROS_DISTRO=indigo _EXTERNAL_REPO='github:ros/actionlib#38ce66e2ae2ec9c19cf12ab22d57a8134a9285be' ROS_REPO=ros ABICHECK_URL=url ABICHECK_MERGE=true # actual URL will not be used in the case
    - ROS_DISTRO=kinetic _EXTERNAL_REPO='github:ros-industrial/ros_canopen#0.7.5' ROS_REPO=ros ABICHECK_URL='github:ros-industrial/ros_canopen#0.7.1' ABICHECK_MERGE=false EXPECT_EXIT_CODE=1
    - ROS_DISTRO=kinetic _EXTERNAL_REPO='github:ros-industrial/ros_canopen#0.7.6' ABICHECK_URL='github:ros-industrial/ros_canopen#0.7.5' ABICHECK_MERGE=false

    # test CLANG_FORMAT_CHECK
    - ROS_DISTRO=indigo TARGET_WORKSPACE='industrial_ci/tests/format_tests/cpp/LLVM' CLANG_FORMAT_CHECK='LLVM' CLANG_FORMAT_VERSION=3.8
    - ROS_DISTRO=melodic TARGET_WORKSPACE='industrial_ci/tests/format_tests/cpp/LLVM' CLANG_FORMAT_CHECK='LLVM'
    - ROS_DISTRO=melodic TARGET_WORKSPACE='industrial_ci/tests/format_tests/cpp/WebKit' CLANG_FORMAT_CHECK='LLVM' EXPECT_EXIT_CODE=1
    - ROS_DISTRO=melodic TARGET_WORKSPACE='industrial_ci/tests/format_tests/cpp/WebKit' CLANG_FORMAT_CHECK='file'
    - ROS_DISTRO=melodic TARGET_WORKSPACE='industrial_ci/tests/format_tests/cpp/LLVM' CLANG_FORMAT_CHECK='WebKit' EXPECT_EXIT_CODE=1
matrix:
  include:
    - script: shellcheck -x *.sh industrial_ci/scripts/*_ci industrial_ci/src/*.sh industrial_ci/src/*/*.sh industrial_ci/tests/*.sh
      env: [shellcheck]


install:
  - if [ -n "$INJECT_QEMU" ]; then sudo apt-get install qemu-user-static; fi
script:
  - CCACHE_DIR=${CCACHE_DIR-$HOME/.ccache} industrial_ci/tests/wrap_travis.sh # this script is only for internal use
  - if ! [ -z "$POST_PROCESS" ]; then $POST_PROCESS; fi
